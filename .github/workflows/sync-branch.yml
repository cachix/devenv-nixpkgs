name: Sync rolling

on:
  schedule:
    - cron: "0 9 * * 1"
  workflow_dispatch:

permissions:
  actions: write # Trigger workflows
  contents: write # Push commits

jobs:
  sync-and-test:
    runs-on: [self-hosted, Linux]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name 'GitHub Actions Bot'
          git config user.email 'actions@github.com'

      - name: Copy patches to temp directory
        run: cp -R patches "$RUNNER_TEMP"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/NixOS/nixpkgs.git
          git fetch upstream

      - name: Create fresh branch from upstream
        run: |
          git checkout -B bump-rolling upstream/nixpkgs-unstable

      - name: Remove nixpkgs workflows
        run: |
          rm -rf .github
          git add -A
          git commit -m "ci: remove nixpkgs workflows"

      - name: Apply patches
        run: |
          for patch in $RUNNER_TEMP/patches/*.patch; do
            if [ -f "$patch" ]; then
              echo "Applying patch: $patch"
              if ! git am "$patch"; then
                echo "Failed to apply patch: $patch"
                exit 1
              fi
            fi
          done

      - name: Push branch
        run: git push -f origin bump-rolling

      - name: Trigger devenv tests
        id: trigger-tests
        run: |
          gh workflow run devenv.yml --ref main -R ${{ github.repository }}
          echo "Waiting for workflow to start..."
          sleep 10
          
          # Get the latest workflow run ID from this repository
          RUN_ID=$(gh run list -w devenv.yml --limit 1 --json databaseId --jq '.[0].databaseId' -R ${{ github.repository }})
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for tests to complete
        run: |
          echo "Waiting for devenv tests to complete..."
          gh run watch ${{ steps.trigger-tests.outputs.run_id }} -R ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get test results and update README
        run: |
          # Get nixpkgs commit hash from bump-rolling branch
          NIXPKGS_COMMIT=$(git rev-parse HEAD)
          NIXPKGS_SHORT=$(git rev-parse --short HEAD)

          # Get workflow run details
          RUN_ID="${{ steps.trigger-tests.outputs.run_id }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/$RUN_ID"

          # Get test results
          JOBS_JSON=$(gh run view $RUN_ID --json jobs -R ${{ github.repository }})

          # Parse job results
          TOTAL_JOBS=$(echo "$JOBS_JSON" | jq '.jobs | length')
          SUCCESSFUL_JOBS=$(echo "$JOBS_JSON" | jq '[.jobs[] | select(.conclusion == "success")] | length')
          FAILED_JOBS=$(echo "$JOBS_JSON" | jq '[.jobs[] | select(.conclusion == "failure")] | length')

          # Calculate success rate
          if [ "$TOTAL_JOBS" -gt 0 ]; then
            SUCCESS_RATE=$((SUCCESSFUL_JOBS * 100 / TOTAL_JOBS))
          else
            SUCCESS_RATE=0
          fi

          # Determine overall status
          if [ "$FAILED_JOBS" -eq 0 ]; then
            STATUS="✅ All tests passing"
          else
            STATUS="❌ Some tests failing"
          fi

          # Get individual job results for platform breakdown
          LINUX_ARM64_CLI=$(echo "$JOBS_JSON" | jq -r '.jobs[] | select(.name | contains("tests") and contains("linux") and contains("ARM64")) | .conclusion // "unknown"')
          LINUX_X64_CLI=$(echo "$JOBS_JSON" | jq -r '.jobs[] | select(.name | contains("tests") and contains("linux") and contains("X64")) | .conclusion // "unknown"')
          MACOS_ARM64_CLI=$(echo "$JOBS_JSON" | jq -r '.jobs[] | select(.name | contains("tests") and contains("macOS") and contains("ARM64")) | .conclusion // "unknown"')
          MACOS_X64_CLI=$(echo "$JOBS_JSON" | jq -r '.jobs[] | select(.name | contains("tests") and contains("macos-13")) | .conclusion // "unknown"')

          # Convert job status to emoji
          status_to_emoji() {
            case $1 in
              "success") echo "✅" ;;
              "failure") echo "❌" ;;
              "cancelled") echo "⏹️" ;;
              "skipped") echo "⏭️" ;;
              *) echo "⏳" ;;
            esac
          }

          # Get current timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          # Checkout main branch to update README
          git checkout main
          git pull origin main

          # Create updated README content using template
          # Convert emoji values
          LINUX_ARM64_CLI_EMOJI=$(status_to_emoji "$LINUX_ARM64_CLI")
          LINUX_X64_CLI_EMOJI=$(status_to_emoji "$LINUX_X64_CLI")
          MACOS_ARM64_CLI_EMOJI=$(status_to_emoji "$MACOS_ARM64_CLI")
          MACOS_X64_CLI_EMOJI=$(status_to_emoji "$MACOS_X64_CLI")

          # Use sed to substitute template variables
          sed -e "s/{{STATUS}}/$STATUS/g" \
              -e "s/{{NIXPKGS_COMMIT}}/$NIXPKGS_COMMIT/g" \
              -e "s/{{NIXPKGS_SHORT}}/$NIXPKGS_SHORT/g" \
              -e "s|{{RUN_URL}}|$RUN_URL|g" \
              -e "s/{{TIMESTAMP}}/$TIMESTAMP/g" \
              -e "s/{{TOTAL_JOBS}}/$TOTAL_JOBS/g" \
              -e "s/{{SUCCESSFUL_JOBS}}/$SUCCESSFUL_JOBS/g" \
              -e "s/{{FAILED_JOBS}}/$FAILED_JOBS/g" \
              -e "s/{{SUCCESS_RATE}}/$SUCCESS_RATE/g" \
              -e "s/{{LINUX_ARM64_CLI}}/$LINUX_ARM64_CLI_EMOJI/g" \
              -e "s/{{LINUX_X64_CLI}}/$LINUX_X64_CLI_EMOJI/g" \
              -e "s/{{MACOS_ARM64_CLI}}/$MACOS_ARM64_CLI_EMOJI/g" \
              -e "s/{{MACOS_X64_CLI}}/$MACOS_X64_CLI_EMOJI/g" \
              .github/templates/test-results.md > /tmp/test_results.md

          # Replace the test results section in README
          sed -i '/<!-- TEST_RESULTS_START -->/,/<!-- TEST_RESULTS_END -->/{ 
            /<!-- TEST_RESULTS_START -->/r /tmp/test_results.md
            /<!-- TEST_RESULTS_START -->/,/<!-- TEST_RESULTS_END -->/d
          }' README.md

          # Commit the updated README
          git add README.md
          git commit -m "ci: update test results for nixpkgs $NIXPKGS_SHORT"
          git push origin main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
